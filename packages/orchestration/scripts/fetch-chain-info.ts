#!/usr/bin/env tsx
/** @file Fetch canonical chain info to generate the minimum needed for agoricNames */
import { ChainRegistryClient } from '@chain-registry/client';
import fsp from 'node:fs/promises';
import prettier from 'prettier';
import type { CosmosChainInfo } from '../src/cosmos-api.js';

// XXX script assumes it's run from the package path
// XXX .json would be more apt; UNTIL https://github.com/endojs/endo/issues/2110
const outputFile = 'src/fetched-chain-info.js';

/**
 * Names for which to fetch info
 */
const chainNames = [
  'celestia',
  'cosmoshub',
  'dydx',
  'juno',
  'neutron',
  'noble',
  'omniflixhub',
  'osmosis',
  'secretnetwork',
  'stargaze',
  'stride',
];

const client = new ChainRegistryClient({
  chainNames,
});

// chain info, assets and ibc data will be downloaded dynamically by invoking fetchUrls method
await client.fetchUrls();

const chainInfo = {} as Record<string, CosmosChainInfo>;

for (const name of chainNames) {
  const chain = client.getChain(name);
  chainInfo[name] = {
    chainId: chain.chain_id,
    stakingTokens: chain.staking?.staking_tokens,
  };
}

const src = `/** @file Generated by fetch-chain-info.ts */\nexport default ${JSON.stringify(chainInfo, null, 2)};`;
const prettySrc = await prettier.format(src, {
  parser: 'typescript',
  singleQuote: true,
  trailingComma: 'all',
});
await fsp.writeFile(outputFile, prettySrc);
