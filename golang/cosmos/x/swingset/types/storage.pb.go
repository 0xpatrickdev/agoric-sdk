// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: agoric/swingset/storage.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Params struct {
	// This is how many computrons we allow before starting a new block.
	MaxComputronsPerBlock             github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=max_computrons_per_block,json=maxComputronsPerBlock,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"max_computrons_per_block"`
	EstimatedComputronsPerVatCreation github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=estimated_computrons_per_vat_creation,json=estimatedComputronsPerVatCreation,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"estimated_computrons_per_vat_creation"`
	FeeDenom                          string                                 `protobuf:"bytes,3,opt,name=fee_denom,json=feeDenom,proto3" json:"fee_denom,omitempty"`
	FeePerMessage                     github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=fee_per_message,json=feePerMessage,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"fee_per_message"`
	FeePerMessageByte                 github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=fee_per_message_byte,json=feePerMessageByte,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"fee_per_message_byte"`
	FeePerMessageSlot                 github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=fee_per_message_slot,json=feePerMessageSlot,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"fee_per_message_slot"`
	FeePerInboundTx                   github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=fee_per_inbound_tx,json=feePerInboundTx,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"fee_per_inbound_tx"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e196a9f45e310a8, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetFeeDenom() string {
	if m != nil {
		return m.FeeDenom
	}
	return ""
}

type Storage struct {
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value" yaml:"value"`
}

func (m *Storage) Reset()         { *m = Storage{} }
func (m *Storage) String() string { return proto.CompactTextString(m) }
func (*Storage) ProtoMessage()    {}
func (*Storage) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e196a9f45e310a8, []int{1}
}
func (m *Storage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Storage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Storage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Storage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Storage.Merge(m, src)
}
func (m *Storage) XXX_Size() int {
	return m.Size()
}
func (m *Storage) XXX_DiscardUnknown() {
	xxx_messageInfo_Storage.DiscardUnknown(m)
}

var xxx_messageInfo_Storage proto.InternalMessageInfo

func (m *Storage) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Keys struct {
	Keys []string `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys" yaml:"keys"`
}

func (m *Keys) Reset()         { *m = Keys{} }
func (m *Keys) String() string { return proto.CompactTextString(m) }
func (*Keys) ProtoMessage()    {}
func (*Keys) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e196a9f45e310a8, []int{2}
}
func (m *Keys) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Keys) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Keys.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Keys) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Keys.Merge(m, src)
}
func (m *Keys) XXX_Size() int {
	return m.Size()
}
func (m *Keys) XXX_DiscardUnknown() {
	xxx_messageInfo_Keys.DiscardUnknown(m)
}

var xxx_messageInfo_Keys proto.InternalMessageInfo

func (m *Keys) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

type Egress struct {
	Nickname   string                                        `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname" yaml:"nickname"`
	Peer       github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=peer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"peer" yaml:"peer"`
	PowerFlags []string                                      `protobuf:"bytes,3,rep,name=power_flags,json=powerFlags,proto3" json:"powerFlags" yaml:"powerFlags"`
}

func (m *Egress) Reset()         { *m = Egress{} }
func (m *Egress) String() string { return proto.CompactTextString(m) }
func (*Egress) ProtoMessage()    {}
func (*Egress) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e196a9f45e310a8, []int{3}
}
func (m *Egress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Egress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Egress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Egress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Egress.Merge(m, src)
}
func (m *Egress) XXX_Size() int {
	return m.Size()
}
func (m *Egress) XXX_DiscardUnknown() {
	xxx_messageInfo_Egress.DiscardUnknown(m)
}

var xxx_messageInfo_Egress proto.InternalMessageInfo

func (m *Egress) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *Egress) GetPeer() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *Egress) GetPowerFlags() []string {
	if m != nil {
		return m.PowerFlags
	}
	return nil
}

func init() {
	proto.RegisterType((*Params)(nil), "agoric.swingset.Params")
	proto.RegisterType((*Storage)(nil), "agoric.swingset.Storage")
	proto.RegisterType((*Keys)(nil), "agoric.swingset.Keys")
	proto.RegisterType((*Egress)(nil), "agoric.swingset.Egress")
}

func init() { proto.RegisterFile("agoric/swingset/storage.proto", fileDescriptor_4e196a9f45e310a8) }

var fileDescriptor_4e196a9f45e310a8 = []byte{
	// 601 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xcf, 0x6b, 0x13, 0x4f,
	0x18, 0xc6, 0xb3, 0xdf, 0xa6, 0x69, 0x3b, 0xed, 0x97, 0xd0, 0xa1, 0xe2, 0xaa, 0x98, 0xa9, 0x0b,
	0x4a, 0x41, 0x9a, 0x20, 0x9e, 0x6c, 0x2f, 0x36, 0xad, 0x62, 0x11, 0x21, 0x6c, 0xb5, 0x07, 0x15,
	0x96, 0xc9, 0xe6, 0xcd, 0xb8, 0x64, 0x77, 0x67, 0x99, 0x99, 0xb4, 0xc9, 0xcd, 0x3f, 0x41, 0x3c,
	0x79, 0xec, 0x9f, 0xd3, 0x63, 0x8f, 0xe2, 0x61, 0x90, 0xf4, 0x52, 0x72, 0xcc, 0x51, 0x10, 0x64,
	0x76, 0x92, 0xf4, 0x07, 0x1e, 0xb4, 0x78, 0x4a, 0x9e, 0xe7, 0x9d, 0xf9, 0x3c, 0xef, 0xbb, 0x0c,
	0x2f, 0xba, 0x4b, 0x19, 0x17, 0x51, 0x58, 0x93, 0x87, 0x51, 0xca, 0x24, 0xa8, 0x9a, 0x54, 0x5c,
	0x50, 0x06, 0xd5, 0x4c, 0x70, 0xc5, 0x71, 0xd9, 0x96, 0xab, 0x93, 0xf2, 0xed, 0x15, 0xc6, 0x19,
	0xcf, 0x6b, 0x35, 0xf3, 0xcf, 0x1e, 0xf3, 0x3e, 0xcf, 0xa2, 0x52, 0x83, 0x0a, 0x9a, 0x48, 0xcc,
	0x90, 0x9b, 0xd0, 0x5e, 0x10, 0xf2, 0x24, 0xeb, 0x2a, 0xc1, 0x53, 0x19, 0x64, 0x20, 0x82, 0x66,
	0xcc, 0xc3, 0x8e, 0xeb, 0xac, 0x3a, 0x6b, 0x0b, 0xf5, 0xea, 0xb1, 0x26, 0x85, 0x6f, 0x9a, 0x3c,
	0x60, 0x91, 0xfa, 0xd0, 0x6d, 0x56, 0x43, 0x9e, 0xd4, 0x42, 0x2e, 0x13, 0x2e, 0xc7, 0x3f, 0xeb,
	0xb2, 0xd5, 0xa9, 0xa9, 0x7e, 0x06, 0xb2, 0xba, 0x9b, 0x2a, 0xff, 0x46, 0x42, 0x7b, 0xdb, 0x53,
	0x5c, 0x03, 0x44, 0xdd, 0xc0, 0xf0, 0x47, 0x07, 0xdd, 0x07, 0xa9, 0xa2, 0x84, 0x2a, 0x68, 0x5d,
	0xcd, 0x3b, 0xa0, 0x2a, 0x08, 0x05, 0x50, 0x15, 0xf1, 0xd4, 0xfd, 0xef, 0x5a, 0xb1, 0xf7, 0xa6,
	0xf0, 0x4b, 0xe1, 0xfb, 0x54, 0x6d, 0x8f, 0xc1, 0xf8, 0x0e, 0x5a, 0x68, 0x03, 0x04, 0x2d, 0x48,
	0x79, 0xe2, 0xce, 0x98, 0x14, 0x7f, 0xbe, 0x0d, 0xb0, 0x63, 0x34, 0xde, 0x47, 0x65, 0x53, 0x34,
	0xdd, 0x24, 0x20, 0x25, 0x65, 0xe0, 0x16, 0xff, 0xba, 0x91, 0x1d, 0x08, 0xfd, 0xff, 0xdb, 0x00,
	0x0d, 0x10, 0xaf, 0x2c, 0x04, 0x07, 0x68, 0xe5, 0x0a, 0x37, 0x68, 0xf6, 0x15, 0xb8, 0xb3, 0xd7,
	0x82, 0x2f, 0x5f, 0x82, 0xd7, 0xfb, 0xea, 0xb7, 0x01, 0x32, 0xe6, 0xca, 0x2d, 0xfd, 0x83, 0x80,
	0xbd, 0x98, 0x2b, 0xfc, 0x0e, 0xe1, 0x49, 0x40, 0x94, 0x36, 0x79, 0x37, 0x6d, 0x05, 0xaa, 0xe7,
	0xce, 0x5d, 0x0b, 0x5f, 0xb6, 0xf8, 0x5d, 0xcb, 0x79, 0xdd, 0xdb, 0x98, 0xff, 0x72, 0x44, 0x0a,
	0x67, 0x47, 0xc4, 0xf1, 0x9e, 0xa2, 0xb9, 0x3d, 0xfb, 0x98, 0x71, 0x0d, 0xcd, 0x1e, 0xd0, 0xb8,
	0x0b, 0xe3, 0x17, 0x78, 0x6b, 0xa8, 0x89, 0x35, 0x46, 0x9a, 0x2c, 0xf5, 0x69, 0x12, 0x6f, 0x78,
	0xb9, 0xf4, 0x7c, 0x6b, 0x6f, 0x14, 0xcf, 0x8e, 0x48, 0xc1, 0x7b, 0x82, 0x8a, 0x2f, 0xa1, 0x2f,
	0xf1, 0x43, 0x54, 0xec, 0x40, 0x5f, 0xba, 0xce, 0xea, 0xcc, 0xda, 0x42, 0xfd, 0xe6, 0x50, 0x93,
	0x5c, 0x8f, 0x34, 0x59, 0xb4, 0x97, 0x8d, 0xf2, 0xfc, 0xdc, 0x1c, 0x5f, 0xfd, 0xe9, 0xa0, 0xd2,
	0x33, 0x26, 0x40, 0x4a, 0xbc, 0x89, 0xe6, 0xd3, 0x28, 0xec, 0xa4, 0x34, 0x99, 0xe4, 0x93, 0xa1,
	0x26, 0x53, 0x6f, 0xa4, 0x49, 0xd9, 0x52, 0x26, 0x8e, 0xe7, 0x4f, 0x8b, 0xf8, 0x3d, 0x2a, 0x66,
	0x00, 0x22, 0x7f, 0xc3, 0x4b, 0xf5, 0x17, 0x26, 0xda, 0xe8, 0xf3, 0x68, 0xa3, 0xbc, 0x1f, 0x9a,
	0xac, 0xff, 0xc1, 0x07, 0xdb, 0x0a, 0xc3, 0xad, 0x56, 0xcb, 0x34, 0xe5, 0xe7, 0x14, 0xec, 0xa3,
	0xc5, 0x8c, 0x1f, 0x82, 0x08, 0xda, 0x31, 0x65, 0xd2, 0x9d, 0xc9, 0xe7, 0x7b, 0x34, 0xd0, 0x04,
	0x35, 0x8c, 0xfd, 0xdc, 0xb8, 0x43, 0x4d, 0x50, 0x36, 0x55, 0x23, 0x4d, 0x96, 0xc7, 0xc1, 0x53,
	0xcf, 0xf3, 0x2f, 0x1c, 0xb0, 0xf3, 0xd7, 0xdf, 0x1c, 0x0f, 0x2a, 0xce, 0xc9, 0xa0, 0xe2, 0x7c,
	0x1f, 0x54, 0x9c, 0x4f, 0xa7, 0x95, 0xc2, 0xc9, 0x69, 0xa5, 0xf0, 0xf5, 0xb4, 0x52, 0x78, 0xbb,
	0x79, 0xa1, 0xd1, 0x2d, 0xbb, 0x7c, 0xec, 0x92, 0xc9, 0x1b, 0x65, 0x3c, 0xa6, 0x29, 0x9b, 0x4c,
	0xd0, 0x3b, 0xdf, 0x4b, 0xf9, 0x04, 0xcd, 0x52, 0xbe, 0x6f, 0x1e, 0xff, 0x0a, 0x00, 0x00, 0xff,
	0xff, 0xff, 0xf0, 0x00, 0x16, 0xb7, 0x04, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MaxComputronsPerBlock.Equal(that1.MaxComputronsPerBlock) {
		return false
	}
	if !this.EstimatedComputronsPerVatCreation.Equal(that1.EstimatedComputronsPerVatCreation) {
		return false
	}
	if this.FeeDenom != that1.FeeDenom {
		return false
	}
	if !this.FeePerMessage.Equal(that1.FeePerMessage) {
		return false
	}
	if !this.FeePerMessageByte.Equal(that1.FeePerMessageByte) {
		return false
	}
	if !this.FeePerMessageSlot.Equal(that1.FeePerMessageSlot) {
		return false
	}
	if !this.FeePerInboundTx.Equal(that1.FeePerInboundTx) {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.FeePerInboundTx.Size()
		i -= size
		if _, err := m.FeePerInboundTx.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStorage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.FeePerMessageSlot.Size()
		i -= size
		if _, err := m.FeePerMessageSlot.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStorage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.FeePerMessageByte.Size()
		i -= size
		if _, err := m.FeePerMessageByte.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStorage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.FeePerMessage.Size()
		i -= size
		if _, err := m.FeePerMessage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStorage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.FeeDenom) > 0 {
		i -= len(m.FeeDenom)
		copy(dAtA[i:], m.FeeDenom)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.FeeDenom)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.EstimatedComputronsPerVatCreation.Size()
		i -= size
		if _, err := m.EstimatedComputronsPerVatCreation.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStorage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.MaxComputronsPerBlock.Size()
		i -= size
		if _, err := m.MaxComputronsPerBlock.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStorage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Storage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Storage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Storage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Keys) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Keys) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Keys) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for iNdEx := len(m.Keys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Keys[iNdEx])
			copy(dAtA[i:], m.Keys[iNdEx])
			i = encodeVarintStorage(dAtA, i, uint64(len(m.Keys[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Egress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Egress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Egress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PowerFlags) > 0 {
		for iNdEx := len(m.PowerFlags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PowerFlags[iNdEx])
			copy(dAtA[i:], m.PowerFlags[iNdEx])
			i = encodeVarintStorage(dAtA, i, uint64(len(m.PowerFlags[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Peer) > 0 {
		i -= len(m.Peer)
		copy(dAtA[i:], m.Peer)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Peer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStorage(dAtA []byte, offset int, v uint64) int {
	offset -= sovStorage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MaxComputronsPerBlock.Size()
	n += 1 + l + sovStorage(uint64(l))
	l = m.EstimatedComputronsPerVatCreation.Size()
	n += 1 + l + sovStorage(uint64(l))
	l = len(m.FeeDenom)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = m.FeePerMessage.Size()
	n += 1 + l + sovStorage(uint64(l))
	l = m.FeePerMessageByte.Size()
	n += 1 + l + sovStorage(uint64(l))
	l = m.FeePerMessageSlot.Size()
	n += 1 + l + sovStorage(uint64(l))
	l = m.FeePerInboundTx.Size()
	n += 1 + l + sovStorage(uint64(l))
	return n
}

func (m *Storage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	return n
}

func (m *Keys) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, s := range m.Keys {
			l = len(s)
			n += 1 + l + sovStorage(uint64(l))
		}
	}
	return n
}

func (m *Egress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.Peer)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	if len(m.PowerFlags) > 0 {
		for _, s := range m.PowerFlags {
			l = len(s)
			n += 1 + l + sovStorage(uint64(l))
		}
	}
	return n
}

func sovStorage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStorage(x uint64) (n int) {
	return sovStorage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxComputronsPerBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxComputronsPerBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimatedComputronsPerVatCreation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EstimatedComputronsPerVatCreation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePerMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeePerMessage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePerMessageByte", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeePerMessageByte.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePerMessageSlot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeePerMessageSlot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePerInboundTx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeePerInboundTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Storage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Storage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Storage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Keys) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Keys: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Keys: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Egress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Egress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Egress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peer = append(m.Peer[:0], dAtA[iNdEx:postIndex]...)
			if m.Peer == nil {
				m.Peer = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerFlags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PowerFlags = append(m.PowerFlags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStorage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStorage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStorage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStorage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStorage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStorage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStorage = fmt.Errorf("proto: unexpected end of group")
)
